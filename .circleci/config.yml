version: "2.1"

orbs:
  aws-cli: "circleci/aws-cli@0.1.13"
  aws-ecr: "circleci/aws-ecr@6.5.0"
  aws-ecs: "circleci/aws-ecs@1.2.0"

workflows:
  build-test-deploy:
    jobs:
    - build:
        repo: example-app/example-app
    - test
    - run-task:
        aws-region: "us-east-1"
        cluster: example-app-staging
        container-name: app
        family: example-app-staging-migrate
        name: example-app-staging-migrate
        requires:
        - build
        - test
        security_group_ids: "sg-059c7f8cb2b14b833,sg-0f950eac5657980cc"
        subnet_ids: "subnet-002f2eb48f28b63ef,subnet-07dad61c0356168f3,subnet-0109120d07487fa16"
    - aws-ecs/deploy-service-update:
        aws-region: "us-east-1"
        cluster-name: example-app-staging
        container-image-name-updates: "container=app,tag=$CIRCLE_SHA1"
        family: example-app-staging-web
        name: example-app-staging-web
        requires:
        - example-app-staging-migrate
        service-name: web
        verify-revision-is-deployed: true
    - aws-ecs/deploy-service-update:
        aws-region: "us-east-1"
        cluster-name: example-app-staging
        container-image-name-updates: "container=app,tag=$CIRCLE_SHA1"
        family: example-app-staging-worker
        name: example-app-staging-worker
        requires:
        - example-app-staging-migrate
        service-name: worker
        verify-revision-is-deployed: true
    - run-task:
        aws-region: "us-east-1"
        cluster: example-app-production
        container-name: app
        family: example-app-production-migrate
        name: example-app-production-migrate
        requires:
        - build
        - test
        security_group_ids: "sg-07b81a4f255c35866,sg-06711d648c5c13764"
        subnet_ids: "subnet-0c4acc48a4d865b13,subnet-04129b8e3d26fe08e,subnet-03f7df8859e3c5fbc"
    - aws-ecs/deploy-service-update:
        aws-region: "us-east-1"
        cluster-name: example-app-production
        container-image-name-updates: "container=app,tag=$CIRCLE_SHA1"
        family: example-app-production-web
        name: example-app-production-web
        requires:
        - example-app-production-migrate
        service-name: web
        verify-revision-is-deployed: true
    - aws-ecs/deploy-service-update:
        aws-region: "us-east-1"
        cluster-name: example-app-production
        container-image-name-updates: "container=app,tag=$CIRCLE_SHA1"
        family: example-app-production-worker
        name: example-app-production-worker
        requires:
        - example-app-production-migrate
        service-name: worker
        verify-revision-is-deployed: true
  version: 2

jobs:
  build:
    docker:
    - image: "circleci/python:3.8.3"
    steps:
    - setup_remote_docker
    - checkout
    - aws-cli/install
    - aws-cli/configure
    - aws-ecr/ecr-login
    - run:
        command: "IMAGE_URL=$AWS_ECR_ACCOUNT_URL/$AWS_ECR_AUTODEPLOY_REPO"
    - run:
        command: "docker pull $IMAGE_URL:$CIRCLE_BRANCH-compile || true"
    - run:
        command: "docker pull $IMAGE_URL:$CIRCLE_SHA1-compile || true"
    - run:
        command: "docker build --cache-from $IMAGE_URL:$CIRCLE_BRANCH-compile --cache-from
          $IMAGE_URL:$CIRCLE_SHA1-compile --target compile --tag $IMAGE_URL:$CIRCLE_SHA1-compile
          ."
    - run:
        command: "docker tag $IMAGE_URL:$CIRCLE_SHA1-compile $IMAGE_URL:$CIRCLE_BRANCH-compile"
    - aws-ecr/push-image:
        repo:
          name: example-app/example-app
        tag: "$CIRCLE_SHA1-compile,$CIRCLE_BRANCH-compile"
    - run:
        command: "docker pull $IMAGE_URL:$CIRCLE_BRANCH || true"
    - run:
        command: "docker pull $IMAGE_URL:$CIRCLE_SHA1 || true"
    - run:
        command: "docker build --cache-from $IMAGE_URL:$CIRCLE_BRANCH-compile --cache-from
          $IMAGE_URL:$CIRCLE_SHA1-compile --cache-from $IMAGE_URL:$CIRCLE_BRANCH --cache-from
          $IMAGE_URL:$CIRCLE_SHA1 --tag $IMAGE_URL:$CIRCLE_SHA1 ."
    - aws-ecr/push-image:
        repo:
          name: example-app/example-app
        tag: "$CIRCLE_BRANCH,$CIRCLE_SHA1"
  run-task:
    docker:
    - image: "circleci/python:3.8.3"
    parameters:
      aws-region:
        type: string
      cluster:
        type: string
      container-name:
        type: string
      family:
        type: string
      security_group_ids:
        type: string
      subnet_ids:
        type: string
    steps:
    - run:
        command: |
          AWS_DEFAULT_REGION=<< parameters.aws-region >>
          AWS_REGION=<< parameters.aws-region >>
        name: "Set AWS region"
    - aws-cli/install
    - aws-cli/configure
    - aws-ecs/update-task-definition:
        container-image-name-updates: "container=<< parameters.container-name >>,tag=${CIRCLE_SHA1}"
        family: "<< parameters.family >>"
    - aws-ecs/run-task:
        cluster: "<< parameters.cluster >>"
        security-group-ids: "<< parameters.security_group_ids >>"
        started-by: "${CIRCLE_SHA1}"
        subnet-ids: "<< parameters.subnet-ids >>"
        task-definition: "<< parameters.family >>"
    - run:
        command: |
          echo "Finding task for ${CIRCLE_SHA1}"
          ARN=$(aws ecs list-tasks \
            --cluster << parameters.cluster >> \
            --started-by "${CIRCLE_SHA1}" \
            --query 'taskArns[]' \
            --output text)
          echo "Found: $ARN"

          echo "Waiting..."
          aws ecs wait tasks-stopped \
            --cluster << parameters.cluster >> \
            --tasks "$ARN"
          echo "Task stopped."

          echo "Checking..."
          EXIT_CODE=$(aws ecs describe-tasks \
            --cluster << parameters.cluster >> \
            --tasks "$ARN" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)

          if [ "$EXIT_CODE" == "0" ]; then
            echo "Task complete"
          else
            echo "Task failed"
            exit 1
          fi
        name: "Wait for task"
  test:
    docker:
    - environment:
        DATABASE_URL: "postgres://test:test@localhost/test"
        RAILS_ENV: test
      image: "circleci/ruby:2.6.6-node-browsers"
    - environment:
        POSTGRES_DB: test
        POSTGRES_PASSWORD: test
        POSTGRES_USER: test
      image: "circleci/postgres:10.5"
    steps:
    - checkout
    - restore_cache:
        keys:
        - "v1-bundle-{{ .Branch }}-{{ checksum \"Gemfile.lock\" }}"
        - "v1-bundle-{{ .Branch }}-"
        - "v1-bundle-"
    - run:
        command: |
          bundle install --deployment \
                          --retry=3 \
                          --jobs=3
        name: "Bundle Install"
    - save_cache:
        key: "v1-bundle-{{ .Branch }}-{{ checksum \"Gemfile.lock\" }}"
        paths:
        - vendor/bundle
    - run:
        command: "dockerize -wait tcp://localhost:5432 -timeout 1m"
        name: "Wait for database"
    - run:
        command: "bin/rails db:setup"
        name: "Database setup"
    - run:
        command: "COVERAGE=true bundle exec rake"
        name: "Run tests"
    - store_artifacts:
        path: coverage
