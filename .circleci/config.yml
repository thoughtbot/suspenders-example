version: 2.1

orbs:
  aws-cli: circleci/aws-cli@0.1.13
  aws-ecr: circleci/aws-ecr@6.5.0
  aws-ecs: circleci/aws-ecs@1.2.0

jobs:
  build:
    docker:
      - image: circleci/python:3.8.3

    steps:
      - setup_remote_docker

      - checkout

      - restore_cache:
          keys:
            - v1-compile-{{ .Branch }}-{{ checksum "Dockerfile" }}
            - v1-compile-{{ .Branch }}-
            - v1-compile-
          paths:
            tmp/layercache/compile.tar

      - run:
          name: Load compile layer
          command: docker load -i tmp/layercache/compile.tar || true

      - run:
          name: Build compile stage
          command: |
            docker build . \
              --cache-from app:compile \
              --tag app:compile \
              --target compile

      - run:
          name: Save compile layer
          command: |
            mkdir -p tmp/layercache
            docker save app:compile -o tmp/layercache/compile.tar

      - save_cache:
          key: v1-compile-{{ .Branch }}-{{ checksum "Dockerfile" }}
          paths:
            - tmp/layercache/compile.tar

      - restore_cache:
          keys:
            - v1-release-{{ .Branch }}-{{ checksum "Dockerfile" }}
            - v1-release-{{ .Branch }}-
            - v1-release-
          paths:
            tmp/layercache/release.tar

      - run:
          name: Load release layer
          command: docker load -i tmp/layercache/release.tar || true

      - run:
          name: Build release stage
          command: |
            docker build . \
              --cache-from app:compile \
              --cache-from app:release \
              --tag app:release

      - run:
          name: Save release layer
          command: |
            mkdir -p tmp/layercache
            docker save app:release -o tmp/layercache/release.tar

      - save_cache:
          key: v1-release-{{ .Branch }}-{{ checksum "Dockerfile" }}
          paths:
            - tmp/layercache/release.tar

      - run:
          name: Tag images
          command: |
            docker tag app:release "${AWS_ECR_ACCOUNT_URL}/${AWS_ECR_AUTODEPLOY_REPO}:${CIRCLE_BRANCH}"
            docker tag app:release "${AWS_ECR_ACCOUNT_URL}/${AWS_ECR_AUTODEPLOY_REPO}:${CIRCLE_SHA1}"

      - aws-cli/install

      - aws-cli/configure

      - aws-ecr/ecr-login

      - aws-ecr/push-image:
          repo: ${AWS_ECR_AUTODEPLOY_REPO}
          tag: ${CIRCLE_BRANCH}

  test:
    docker:
      - image: circleci/ruby:2.6.6-node-browsers
        environment:
          RAILS_ENV: test
          DATABASE_URL: postgres://test:test@localhost/test
      - image: circleci/postgres:10.5
        environment:
           POSTGRES_USER: test
           POSTGRES_DB: test
           POSTGRES_PASSWORD: test
    steps:
      - checkout

      - run:
          name: Which Bundler?
          command: bundle -v

      - restore_cache:
          keys:
            - v1-bundle-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
            - v1-bundle-{{ .Branch }}-
            - v1-bundle-

      - run:
          name: Bundle Install
          command: |
            bundle install --deployment \
                           --retry=3 \
                           --jobs=3

      - save_cache:
          key: v1-bundle-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      - run:
          name: Wait for database
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run:
          name: Database setup
          command: bin/rails db:setup

      - run:
          name: Run tests
          command: COVERAGE=true bundle exec rake

      - store_artifacts:
           path: coverage

  migrate:
    parameters:
      family:
        type: string

    docker:
      - image: circleci/python:3.8.3

    steps:
      - aws-cli/install

      - aws-cli/configure

      - aws-ecs/run-task:
          cluster: 'example-staging'
          subnet-ids: '${AWS_SUBNET_IDS}'
          security-group-ids: '${AWS_SECURITY_GROUP_IDS}'
          started-by: '${CIRCLE_SHA1}'
          task-definition: << parameters.family >>

      - run:
          name: Wait for migrations
          command: |
            ARN=$(aws ecs list-tasks \
              --cluster example-staging \
              --started-by "${CIRCLE_SHA1}" \
              --query 'tasks[].arn' \
              --output text

            aws ecs wait tasks-stopped --tasks "$ARN"

            EXIT_CODE=$(aws ecs describe-tasks \
              --cluster example-staging \
              --tasks "$ARN" \
              --query 'tasks[0].containers[0].exitCode' \
              --output text)

            if [ "$EXIT_CODE" != "0" ]; then
              echo "Migrations failed"
              exit 1
            fi

  update-service:
    parameters:
      family:
        type: string

    docker:
      - image: circleci/python:3.8.3

    steps:
      - aws-cli/install

      - aws-cli/configure

      - aws-ecs/update-service:
          family: << parameters.family >>
          cluster-name: 'example-staging'
          container-image-name-updates: 'container=example,tag=${CIRCLE_SHA1}'
          service-name: 'web'
          verify-revision-is-deployed: true

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build:
          context: suspenders-example-build
      - test
      - migrate:
          family: example-staging-migrate
          context: suspenders-example-staging-deploy
          requires:
            - build
            - test
      - update-service:
          family: example-staging-web
          context: suspenders-example-staging-deploy
          requires:
            - migrate
      - update-service:
          family: example-staging-worker
          context: suspenders-example-staging-deploy
          requires:
            - migrate
