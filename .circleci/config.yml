version: "2.1"

orbs:
  aws-cli: "circleci/aws-cli@0.1.13"
  aws-ecr: "circleci/aws-ecr@6.5.0"
  aws-ecs: "circleci/aws-ecs@1.2.0"

workflows:
  build-test-deploy:
    jobs:
    - build
    - test
    - run-task:
        cluster: example-app-staging
        container-name: example-app
        family: example-app-staging-example-app-migrate
        filters:
          branches:
            only:
            - main
        name: example-app-staging-example-app-migrate
        requires:
        - build
        - test
        run: "{\"launchType\":\"FARGATE\",\"networkConfiguration\":{\"awsvpcConfiguration\":{\"securityGroups\":[\"sg-02f435311e9a0b864\"],\"subnets\":[\"subnet-00ba3c7f5b3b051ed\",\"subnet-04ee7526beaf76e50\",\"subnet-0d6f82a49e814834a\"]}}}"
    - aws-ecs/deploy-service-update:
        cluster-name: example-app-staging
        container-image-name-updates: "container=example-app,tag=$CIRCLE_SHA1"
        family: example-app-staging-example-app-web
        filters:
          branches:
            only:
            - main
        name: example-app-staging-example-app-web
        requires:
        - example-app-staging-example-app-migrate
        service-name: example-app-staging-web
        verify-revision-is-deployed: true
    - aws-ecs/deploy-service-update:
        cluster-name: example-app-staging
        container-image-name-updates: "container=example-app,tag=$CIRCLE_SHA1"
        family: example-app-staging-example-app-worker
        filters:
          branches:
            only:
            - main
        name: example-app-staging-example-app-worker
        requires:
        - example-app-staging-example-app-migrate
        service-name: example-app-staging-worker
        verify-revision-is-deployed: true
    - tag-image:
        filters:
          branches:
            only:
            - main
        name: tag-staging
        repo: example-app/example-app
        requires:
        - example-app-staging-example-app-web
        - example-app-staging-example-app-worker
        tag: staging
    - run-task:
        cluster: example-app-production
        container-name: example-app
        family: example-app-production-example-app-migrate
        filters:
          branches:
            only:
            - main
        name: example-app-production-example-app-migrate
        requires:
        - staging-acceptance
        run: "{\"launchType\":\"FARGATE\",\"networkConfiguration\":{\"awsvpcConfiguration\":{\"securityGroups\":[\"sg-0a659ab16a2dcdb58\"],\"subnets\":[\"subnet-00fde99554dc70f7d\",\"subnet-043719a810ad0602f\",\"subnet-0b0207c8e8379462a\"]}}}"
    - aws-ecs/deploy-service-update:
        cluster-name: example-app-production
        container-image-name-updates: "container=example-app,tag=$CIRCLE_SHA1"
        family: example-app-production-example-app-web
        filters:
          branches:
            only:
            - main
        name: example-app-production-example-app-web
        requires:
        - example-app-production-example-app-migrate
        service-name: example-app-production-web
        verify-revision-is-deployed: true
    - aws-ecs/deploy-service-update:
        cluster-name: example-app-production
        container-image-name-updates: "container=example-app,tag=$CIRCLE_SHA1"
        family: example-app-production-example-app-worker
        filters:
          branches:
            only:
            - main
        name: example-app-production-example-app-worker
        requires:
        - example-app-production-example-app-migrate
        service-name: example-app-production-worker
        verify-revision-is-deployed: true
    - tag-image:
        filters:
          branches:
            only:
            - main
        name: tag-production
        repo: example-app/example-app
        requires:
        - example-app-production-example-app-web
        - example-app-production-example-app-worker
        tag: production
    - staging-acceptance:
        requires:
        - example-app-staging-example-app-web
        - example-app-staging-example-app-worker
        type: approval
  version: 2

jobs:
  build:
    docker:
    - environment:
        AWS_DEFAULT_REGION: "us-east-1"
        AWS_REGION: "us-east-1"
      image: "circleci/python:3.8.3"
    steps:
    - setup_remote_docker
    - checkout
    - aws-cli/install
    - aws-cli/configure:
        aws-region: AWS_REGION
    - aws-ecr/ecr-login
    - run:
        command: "docker pull $AWS_ECR_ACCOUNT_URL/example-app/example-app:$CIRCLE_BRANCH-build
          || true"
        name: "Pull branch build stage"
    - run:
        command: "docker pull $AWS_ECR_ACCOUNT_URL/example-app/example-app:$CIRCLE_SHA1-build
          || true"
        name: "Pull commit build stage"
    - run:
        command: "docker build --cache-from $AWS_ECR_ACCOUNT_URL/example-app/example-app:$CIRCLE_BRANCH-build
          --cache-from $AWS_ECR_ACCOUNT_URL/example-app/example-app:$CIRCLE_SHA1-build
          --target compile --tag app:build ."
        name: "Build stage"
    - run:
        command: "docker tag app:build $AWS_ECR_ACCOUNT_URL/example-app/example-app:$CIRCLE_BRANCH-build"
        name: "Tag branch build"
    - run:
        command: "docker tag app:build $AWS_ECR_ACCOUNT_URL/example-app/example-app:$CIRCLE_SHA1-build"
        name: "Tag commit build"
    - aws-ecr/push-image:
        repo: example-app/example-app
        tag: "$CIRCLE_SHA1-build,$CIRCLE_BRANCH-build"
    - run:
        command: "docker pull $AWS_ECR_ACCOUNT_URL/example-app/example-app:$CIRCLE_BRANCH
          || true"
        name: "Pull branch release stage"
    - run:
        command: "docker pull $AWS_ECR_ACCOUNT_URL/example-app/example-app:$CIRCLE_SHA1
          || true"
        name: "Pull commit release stage"
    - run:
        command: "docker build --cache-from $AWS_ECR_ACCOUNT_URL/example-app/example-app:$CIRCLE_BRANCH-build
          --cache-from $AWS_ECR_ACCOUNT_URL/example-app/example-app:$CIRCLE_SHA1-build
          --cache-from $AWS_ECR_ACCOUNT_URL/example-app/example-app:$CIRCLE_BRANCH
          --cache-from $AWS_ECR_ACCOUNT_URL/example-app/example-app:$CIRCLE_SHA1 --tag
          app:release ."
        name: "Release stage"
    - run:
        command: "docker tag app:release $AWS_ECR_ACCOUNT_URL/example-app/example-app:$CIRCLE_BRANCH"
        name: "Tag branch release"
    - run:
        command: "docker tag app:release $AWS_ECR_ACCOUNT_URL/example-app/example-app:$CIRCLE_SHA1"
        name: "Tag commit release"
    - aws-ecr/push-image:
        repo: example-app/example-app
        tag: "$CIRCLE_BRANCH,$CIRCLE_SHA1"
  run-task:
    docker:
    - image: "circleci/python:3.8.3"
    parameters:
      cluster:
        type: string
      container-name:
        type: string
      family:
        type: string
      run:
        type: string
    steps:
    - aws-cli/install
    - aws-cli/configure:
        aws-region: AWS_REGION
    - aws-ecs/update-task-definition:
        container-image-name-updates: "container=<< parameters.container-name >>,tag=${CIRCLE_SHA1}"
        family: "<< parameters.family >>"
    - run:
        command: |
          aws ecs run-task \
            --cluster "<< parameters.cluster >>" \
            --started-by "$CIRCLE_SHA1" \
            --task-definition "<< parameters.family >>" \
            --cli-input-json '<< parameters.run >>'
        name: "Run task"
    - run:
        command: |
          echo "Finding task for ${CIRCLE_SHA1}"
          ARN=$(aws ecs list-tasks \
            --cluster << parameters.cluster >> \
            --started-by "${CIRCLE_SHA1}" \
            --query 'taskArns[]' \
            --output text)
          echo "Found: $ARN"

          echo "Waiting..."
          aws ecs wait tasks-stopped \
            --cluster << parameters.cluster >> \
            --tasks "$ARN"
          echo "Task stopped."

          echo "Checking..."
          EXIT_CODE=$(aws ecs describe-tasks \
            --cluster << parameters.cluster >> \
            --tasks "$ARN" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)

          if [ "$EXIT_CODE" == "0" ]; then
            echo "Task complete"
          else
            echo "Task failed"
            exit 1
          fi
        name: "Wait for task"
  tag-image:
    docker:
    - image: "circleci/python:3.8.3"
    parameters:
      repo:
        type: string
      tag:
        type: string
    steps:
    - aws-cli/install
    - aws-cli/configure:
        aws-region: AWS_REGION
    - run:
        command: |
          docker pull \
            "$AWS_ECR_ACCOUNT_URL/<< parameters.repo >>:$CIRCLE_SHA1"
        name: "Pull image"
    - run:
        command: |
          docker tag \
            "$AWS_ECR_ACCOUNT_URL/<< parameters.repo>>:$CIRCLE_SHA1" \
            "$AWS_ECR_ACCOUNT_URL/<< parameters.repo>>:<< parameters.tag >>"
        name: "Tag image"
    - aws-ecr/push-image:
        repo: "<< parameters.repo >>"
        tag: "<< parameters.tag >>"
  test:
    docker:
    - environment:
        DATABASE_URL: "postgres://test:test@localhost/test"
        RAILS_ENV: test
      image: "circleci/ruby:2.6.6-node-browsers"
    - environment:
        POSTGRES_DB: test
        POSTGRES_PASSWORD: test
        POSTGRES_USER: test
      image: "circleci/postgres:10.5"
    steps:
    - checkout
    - restore_cache:
        keys:
        - "v1-bundle-{{ .Branch }}-{{ checksum \"Gemfile.lock\" }}"
        - "v1-bundle-{{ .Branch }}-"
        - "v1-bundle-"
    - run:
        command: |
          bundle install --deployment \
                          --retry=3 \
                          --jobs=3
        name: "Bundle Install"
    - save_cache:
        key: "v1-bundle-{{ .Branch }}-{{ checksum \"Gemfile.lock\" }}"
        paths:
        - vendor/bundle
    - run:
        command: "dockerize -wait tcp://localhost:5432 -timeout 1m"
        name: "Wait for database"
    - run:
        command: "bin/rails db:setup"
        name: "Database setup"
    - run:
        command: "COVERAGE=true bundle exec rake"
        name: "Run tests"
    - store_artifacts:
        path: coverage
